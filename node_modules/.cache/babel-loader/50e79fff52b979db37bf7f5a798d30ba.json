{"ast":null,"code":"import _toConsumableArray from \"/Users/gsg/Documents/3d/react-demo/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/gsg/Documents/3d/react-demo/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/gsg/Documents/3d/react-demo/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as THREE from 'three';\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras';\nimport { addEffect } from 'react-three-fiber';\nimport create from 'zustand';\nimport * as audio from './audio';\nvar guid = 1;\n\nvar _create = create(function (set, get) {\n  var spline = new Curves.GrannyKnot();\n  var track = new THREE.TubeBufferGeometry(spline, 250, 0.2, 10, true);\n  var cancelLaserTO = undefined;\n  var cancelExplosionTO = undefined;\n  var box = new THREE.Box3();\n  return {\n    sound: false,\n    camera: undefined,\n    points: 0,\n    health: 100,\n    lasers: [],\n    explosions: [],\n    rocks: randomData(100, track, 150, 8, function () {\n      return 1 + Math.random() * 2.5;\n    }),\n    enemies: randomData(10, track, 20, 15, 1),\n    mutation: {\n      t: 0,\n      position: new THREE.Vector3(),\n      startTime: Date.now(),\n      track,\n      scale: 15,\n      fov: 70,\n      hits: false,\n      rings: randomRings(30, track),\n      particles: randomData(1500, track, 100, 1, function () {\n        return 0.5 + Math.random() * 0.8;\n      }),\n      looptime: 40 * 1000,\n      binormal: new THREE.Vector3(),\n      normal: new THREE.Vector3(),\n      clock: new THREE.Clock(false),\n      mouse: new THREE.Vector2(-250, 50),\n      // Re-usable objects\n      dummy: new THREE.Object3D(),\n      ray: new THREE.Ray(),\n      box: new THREE.Box3()\n    },\n    actions: {\n      init(camera) {\n        var _get = get(),\n            mutation = _get.mutation,\n            actions = _get.actions;\n\n        set({\n          camera\n        });\n        mutation.clock.start();\n        actions.toggleSound(get().sound);\n        addEffect(function () {\n          var _get2 = get(),\n              rocks = _get2.rocks,\n              enemies = _get2.enemies;\n\n          var time = Date.now();\n          var t = mutation.t = (time - mutation.startTime) % mutation.looptime / mutation.looptime;\n          mutation.position = track.parameters.path.getPointAt(t);\n          mutation.position.multiplyScalar(mutation.scale); // test for wormhole/warp\n\n          var warping = false;\n\n          if (t > 0.3 && t < 0.4) {\n            if (!warping) {\n              warping = true;\n              playAudio(audio.warp);\n            }\n          } else if (t > 0.5) warping = false; // test for hits\n\n\n          var r = rocks.filter(actions.test);\n          var e = enemies.filter(actions.test);\n          var a = r.concat(e);\n          var previous = mutation.hits;\n          mutation.hits = a.length;\n          if (previous === 0 && mutation.hits) playAudio(audio.click);\n          var lasers = get().lasers;\n\n          if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {\n            var updates = a.map(function (data) {\n              return _objectSpread({\n                time: Date.now()\n              }, data);\n            });\n            set(function (state) {\n              return {\n                explosions: [].concat(_toConsumableArray(state.explosions), _toConsumableArray(updates))\n              };\n            });\n            clearTimeout(cancelExplosionTO);\n            cancelExplosionTO = setTimeout(function () {\n              return set(function (state) {\n                return {\n                  explosions: state.explosions.filter(function (_ref) {\n                    var time = _ref.time;\n                    return Date.now() - time <= 1000;\n                  })\n                };\n              });\n            }, 1000);\n            set(function (state) {\n              return {\n                points: state.points + r.length * 100 + e.length * 200,\n                rocks: state.rocks.filter(function (rock) {\n                  return !r.find(function (r) {\n                    return r.guid === rock.guid;\n                  });\n                }),\n                enemies: state.enemies.filter(function (enemy) {\n                  return !e.find(function (e) {\n                    return e.guid === enemy.guid;\n                  });\n                })\n              };\n            });\n          } //if (a.some(data => data.distance < 15)) set(state => ({ health: state.health - 1 }))\n\n        });\n      },\n\n      shoot() {\n        set(function (state) {\n          return {\n            lasers: [].concat(_toConsumableArray(state.lasers), [Date.now()])\n          };\n        });\n        clearTimeout(cancelLaserTO);\n        cancelLaserTO = setTimeout(function () {\n          return set(function (state) {\n            return {\n              lasers: state.lasers.filter(function (t) {\n                return Date.now() - t <= 1000;\n              })\n            };\n          });\n        }, 1000);\n        playAudio(audio.zap, 0.5);\n      },\n\n      toggleSound() {\n        var sound = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !get().sound;\n        set({\n          sound\n        });\n        playAudio(audio.engine, 1, true);\n        playAudio(audio.engine2, 0.3, true);\n        playAudio(audio.bg, 1, true);\n      },\n\n      updateMouse(_ref2) {\n        var x = _ref2.clientX,\n            y = _ref2.clientY;\n        get().mutation.mouse.set(x - window.innerWidth / 2, y - window.innerHeight / 2);\n      },\n\n      test(data) {\n        box.min.copy(data.offset);\n        box.max.copy(data.offset);\n        box.expandByScalar(data.size * data.scale);\n        data.hit.set(10000, 10000, 10000);\n        var result = get().mutation.ray.intersectBox(box, data.hit);\n        data.distance = get().mutation.ray.origin.distanceTo(data.hit);\n        return result;\n      }\n\n    }\n  };\n}),\n    _create2 = _slicedToArray(_create, 2),\n    useStore = _create2[0],\n    api = _create2[1];\n\nfunction randomData(count, track, radius, size, scale) {\n  return new Array(count).fill().map(function () {\n    var t = Math.random();\n    var pos = track.parameters.path.getPointAt(t);\n    pos.multiplyScalar(15);\n    var offset = pos.clone().add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2));\n    var speed = 0.1 + Math.random();\n    return {\n      guid: guid++,\n      scale: typeof scale === 'function' ? scale() : scale,\n      size,\n      offset,\n      pos,\n      speed,\n      radius,\n      t,\n      hit: new THREE.Vector3(),\n      distance: 1000\n    };\n  });\n}\n\nfunction randomRings(count, track) {\n  var temp = [];\n  var t = 0.4;\n\n  for (var i = 0; i < count; i++) {\n    t += 0.003;\n    var pos = track.parameters.path.getPointAt(t);\n    pos.multiplyScalar(15);\n    var segments = track.tangents.length;\n    var pickt = t * segments;\n    var pick = Math.floor(pickt);\n    var lookAt = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(15);\n    var matrix = new THREE.Matrix4().lookAt(pos, lookAt, track.binormals[pick]);\n    temp.push([pos.toArray(), matrix]);\n  }\n\n  return temp;\n}\n\nfunction playAudio(audio) {\n  var volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var loop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (api.getState().sound) {\n    audio.currentTime = 0;\n    audio.volume = volume;\n    audio.loop = loop;\n    audio.play();\n  } else audio.pause();\n}\n\nexport default useStore;\nexport { audio, playAudio };","map":{"version":3,"sources":["/Users/gsg/Documents/3d/react-demo/demo/src/store.js"],"names":["THREE","Curves","addEffect","create","audio","guid","set","get","spline","GrannyKnot","track","TubeBufferGeometry","cancelLaserTO","undefined","cancelExplosionTO","box","Box3","sound","camera","points","health","lasers","explosions","rocks","randomData","Math","random","enemies","mutation","t","position","Vector3","startTime","Date","now","scale","fov","hits","rings","randomRings","particles","looptime","binormal","normal","clock","Clock","mouse","Vector2","dummy","Object3D","ray","Ray","actions","init","start","toggleSound","time","parameters","path","getPointAt","multiplyScalar","warping","playAudio","warp","r","filter","test","e","a","concat","previous","length","click","updates","map","data","state","clearTimeout","setTimeout","rock","find","enemy","shoot","zap","engine","engine2","bg","updateMouse","x","clientX","y","clientY","window","innerWidth","innerHeight","min","copy","offset","max","expandByScalar","size","hit","result","intersectBox","distance","origin","distanceTo","useStore","api","count","radius","Array","fill","pos","clone","add","speed","temp","i","segments","tangents","pickt","pick","floor","lookAt","getLength","matrix","Matrix4","binormals","push","toArray","volume","loop","getState","currentTime","play","pause"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras'\nimport { addEffect } from 'react-three-fiber'\nimport create from 'zustand'\nimport * as audio from './audio'\n\nlet guid = 1;\n\nconst [useStore, api] = create((set, get) => {\n    let spline = new Curves.GrannyKnot()\n    let track = new THREE.TubeBufferGeometry(spline, 250, 0.2, 10, true)\n    let cancelLaserTO = undefined\n    let cancelExplosionTO = undefined\n    const box = new THREE.Box3()\n\n    return {\n        sound: false,\n        camera: undefined,\n        points: 0,\n        health: 100,\n        lasers: [],\n        explosions: [],\n        rocks: randomData(100, track, 150, 8, () => 1 + Math.random() * 2.5),\n        enemies: randomData(10, track, 20, 15, 1),\n\n        mutation: {\n            t: 0,\n            position: new THREE.Vector3(),\n            startTime: Date.now(),\n\n            track,\n            scale: 15,\n            fov: 70,\n            hits: false,\n            rings: randomRings(30, track),\n            particles: randomData(1500, track, 100, 1, () => 0.5 + Math.random() * 0.8),\n            looptime: 40 * 1000,\n            binormal: new THREE.Vector3(),\n            normal: new THREE.Vector3(),\n            clock: new THREE.Clock(false),\n            mouse: new THREE.Vector2(-250, 50),\n\n            // Re-usable objects\n            dummy: new THREE.Object3D(),\n            ray: new THREE.Ray(),\n            box: new THREE.Box3()\n        },\n\n        actions: {\n            init(camera) {\n                const { mutation, actions } = get()\n\n                set({ camera })\n                mutation.clock.start()\n                actions.toggleSound(get().sound)\n\n                addEffect(() => {\n                    const { rocks, enemies } = get()\n\n                    const time = Date.now()\n                    const t = (mutation.t = ((time - mutation.startTime) % mutation.looptime) / mutation.looptime)\n                    mutation.position = track.parameters.path.getPointAt(t)\n                    mutation.position.multiplyScalar(mutation.scale)\n\n                    // test for wormhole/warp\n                    let warping = false\n                    if (t > 0.3 && t < 0.4) {\n                        if (!warping) {\n                            warping = true\n                            playAudio(audio.warp)\n                        }\n                    } else if (t > 0.5) warping = false\n\n                    // test for hits\n                    const r = rocks.filter(actions.test)\n                    const e = enemies.filter(actions.test)\n                    const a = r.concat(e)\n                    const previous = mutation.hits\n                    mutation.hits = a.length\n                    if (previous === 0 && mutation.hits) playAudio(audio.click)\n                    const lasers = get().lasers\n                    if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {\n                        const updates = a.map(data => ({ time: Date.now(), ...data }))\n                        set(state => ({ explosions: [...state.explosions, ...updates] }))\n                        clearTimeout(cancelExplosionTO)\n                        cancelExplosionTO = setTimeout(() => set(state => ({ explosions: state.explosions.filter(({ time }) => Date.now() - time <= 1000) })), 1000)\n                        set(state => ({\n                            points: state.points + r.length * 100 + e.length * 200,\n                            rocks: state.rocks.filter(rock => !r.find(r => r.guid === rock.guid)),\n                            enemies: state.enemies.filter(enemy => !e.find(e => e.guid === enemy.guid))\n                        }))\n                    }\n                    //if (a.some(data => data.distance < 15)) set(state => ({ health: state.health - 1 }))\n                })\n            },\n            shoot() {\n                set(state => ({ lasers: [...state.lasers, Date.now()] }))\n                clearTimeout(cancelLaserTO)\n                cancelLaserTO = setTimeout(() => set(state => ({ lasers: state.lasers.filter(t => Date.now() - t <= 1000) })), 1000)\n                playAudio(audio.zap, 0.5)\n            },\n            toggleSound(sound = !get().sound) {\n                set({ sound })\n                playAudio(audio.engine, 1, true)\n                playAudio(audio.engine2, 0.3, true)\n                playAudio(audio.bg, 1, true)\n            },\n            updateMouse({ clientX: x, clientY: y }) {\n                get().mutation.mouse.set(x - window.innerWidth / 2, y - window.innerHeight / 2)\n            },\n            test(data) {\n                box.min.copy(data.offset)\n                box.max.copy(data.offset)\n                box.expandByScalar(data.size * data.scale)\n                data.hit.set(10000, 10000, 10000)\n                const result = get().mutation.ray.intersectBox(box, data.hit)\n                data.distance = get().mutation.ray.origin.distanceTo(data.hit)\n                return result\n            }\n        }\n    }\n})\n\nfunction randomData(count, track, radius, size, scale) {\n    return new Array(count).fill().map(() => {\n        const t = Math.random()\n        const pos = track.parameters.path.getPointAt(t)\n        pos.multiplyScalar(15)\n        const offset = pos\n            .clone()\n            .add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2))\n        const speed = 0.1 + Math.random()\n        return { guid: guid++, scale: typeof scale === 'function' ? scale() : scale, size, offset, pos, speed, radius, t, hit: new THREE.Vector3(), distance: 1000 }\n    })\n}\n\nfunction randomRings(count, track) {\n    let temp = []\n    let t = 0.4\n    for (let i = 0; i < count; i++) {\n        t += 0.003\n        const pos = track.parameters.path.getPointAt(t)\n        pos.multiplyScalar(15)\n        const segments = track.tangents.length\n        const pickt = t * segments\n        const pick = Math.floor(pickt)\n        const lookAt = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(15)\n        const matrix = new THREE.Matrix4().lookAt(pos, lookAt, track.binormals[pick])\n        temp.push([pos.toArray(), matrix])\n    }\n    return temp\n}\n\nfunction playAudio(audio, volume = 1, loop = false) {\n    if (api.getState().sound) {\n        audio.currentTime = 0\n        audio.volume = volume\n        audio.loop = loop\n        audio.play()\n    } else audio.pause()\n}\n\nexport default useStore\nexport { audio, playAudio }\n"]},"metadata":{},"sourceType":"module"}
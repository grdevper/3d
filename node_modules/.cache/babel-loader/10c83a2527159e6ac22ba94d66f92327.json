{"ast":null,"code":"var _jsxFileName = \"/Users/gsg/Documents/3d/react-demo/demo/src/3d/Enemies.js\",\n    _this2 = this;\n\nimport * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport useStore from '../store';\nexport default function Enemies() {\n  var _this = this;\n\n  var enemies = useStore(function (state) {\n    return state.enemies;\n  });\n  return enemies.map(function (data, i) {\n    return /*#__PURE__*/React.createElement(Drone, {\n      key: i,\n      data: data,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 37\n      }\n    });\n  });\n}\nvar box = new THREE.Box3();\nbox.setFromCenterAndSize(new THREE.Vector3(0, 0, 1), new THREE.Vector3(3, 3, 3));\nvar glowMaterial = new THREE.MeshBasicMaterial({\n  color: new THREE.Color('lightblue')\n});\nvar Drone = React.memo(function (_ref) {\n  var data = _ref.data;\n\n  var _useStore = useStore(function (state) {\n    return state.mutation;\n  }),\n      clock = _useStore.clock;\n\n  var gltf = useLoader(GLTFLoader, '/drone.gltf');\n  var ref = useRef();\n  useFrame(function () {\n    var r = Math.cos(clock.getElapsedTime() / 2 * data.speed) * Math.PI;\n    ref.current.position.copy(data.offset);\n    ref.current.rotation.set(r, r, r);\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref,\n    scale: [5, 5, 5],\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [0, 0, 50],\n    rotation: [Math.PI / 2, 0, 0],\n    material: glowMaterial,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"cylinderBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.25, 0.25, 100, 4],\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    name: \"Sphere_DroneGlowmat_0\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", Object.assign({\n    attach: \"geometry\"\n  }, gltf.__$[7].geometry, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", Object.assign({\n    attach: \"material\"\n  }, gltf.__$[7].material, {\n    name: \"DroneGlowmat\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"mesh\", {\n    name: \"Sphere_Body_0\",\n    material: glowMaterial,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", Object.assign({\n    attach: \"geometry\"\n  }, gltf.__$[8].geometry, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", Object.assign({\n    attach: \"material\"\n  }, gltf.__$[8].material, {\n    name: \"Body\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }))));\n});","map":{"version":3,"sources":["/Users/gsg/Documents/3d/react-demo/demo/src/3d/Enemies.js"],"names":["THREE","React","useRef","useLoader","useFrame","GLTFLoader","useStore","Enemies","enemies","state","map","data","i","box","Box3","setFromCenterAndSize","Vector3","glowMaterial","MeshBasicMaterial","color","Color","Drone","memo","mutation","clock","gltf","ref","r","Math","cos","getElapsedTime","speed","PI","current","position","copy","offset","rotation","set","__$","geometry","material"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nexport default function Enemies() {\n    const enemies = useStore(state => state.enemies)\n    return enemies.map((data, i) => <Drone key={i} data={data} />)\n}\n\nconst box = new THREE.Box3()\nbox.setFromCenterAndSize(new THREE.Vector3(0, 0, 1), new THREE.Vector3(3, 3, 3))\nconst glowMaterial = new THREE.MeshBasicMaterial({ color: new THREE.Color('lightblue') })\n\nconst Drone = React.memo(({ data }) => {\n    const { clock } = useStore(state => state.mutation)\n    const gltf = useLoader(GLTFLoader, '/drone.gltf')\n    const ref = useRef()\n\n    useFrame(() => {\n        const r = Math.cos((clock.getElapsedTime() / 2) * data.speed) * Math.PI\n        ref.current.position.copy(data.offset)\n        ref.current.rotation.set(r, r, r)\n    })\n\n    return (\n        <group ref={ref} scale={[5, 5, 5]}>\n            <mesh position={[0, 0, 50]} rotation={[Math.PI / 2, 0, 0]} material={glowMaterial}>\n                <cylinderBufferGeometry attach=\"geometry\" args={[0.25, 0.25, 100, 4]} />\n            </mesh>\n            <mesh name=\"Sphere_DroneGlowmat_0\">\n                <bufferGeometry attach=\"geometry\" {...gltf.__$[7].geometry} />\n                <meshStandardMaterial attach=\"material\" {...gltf.__$[7].material} name=\"DroneGlowmat\" />\n            </mesh>\n            <mesh name=\"Sphere_Body_0\" material={glowMaterial}>\n                <bufferGeometry attach=\"geometry\" {...gltf.__$[8].geometry} />\n                <meshStandardMaterial attach=\"material\" {...gltf.__$[8].material} name=\"Body\" />\n            </mesh>\n        </group>\n    )\n})\n"]},"metadata":{},"sourceType":"module"}
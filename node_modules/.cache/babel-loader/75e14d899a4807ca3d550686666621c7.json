{"ast":null,"code":"var _jsxFileName = \"/Users/gsg/Documents/3d/react-demo/demo/src/3d/Particles.js\";\nimport React, { useRef, useEffect } from 'react';\nimport useStore from '../store';\nexport default function Particles() {\n  var instancedMesh = useRef();\n\n  var _useStore = useStore(function (state) {\n    return state.mutation;\n  }),\n      particles = _useStore.particles,\n      dummy = _useStore.dummy;\n\n  useEffect(function () {\n    particles.forEach(function (particle, i) {\n      var offset = particle.offset,\n          scale = particle.scale;\n      dummy.position.copy(offset);\n      dummy.scale.set(scale, scale, scale);\n      dummy.rotation.set(Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI);\n      dummy.updateMatrix();\n      instancedMesh.current.setMatrixAt(i, dummy.matrix);\n    });\n    instancedMesh.current.instanceMatrix.needsUpdate = true;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n    ref: instancedMesh,\n    args: [null, null, particles.length],\n    frustumCulled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"coneBufferGeometry\", {\n    attach: \"geometry\",\n    args: [2, 2, 3],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"#606060\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/gsg/Documents/3d/react-demo/demo/src/3d/Particles.js"],"names":["React","useRef","useEffect","useStore","Particles","instancedMesh","state","mutation","particles","dummy","forEach","particle","i","offset","scale","position","copy","set","rotation","Math","sin","random","PI","cos","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAChC,MAAMC,aAAa,GAAGJ,MAAM,EAA5B;;AADgC,kBAEHE,QAAQ,CAAC,UAAAG,KAAK;AAAA,WAAIA,KAAK,CAACC,QAAV;AAAA,GAAN,CAFL;AAAA,MAExBC,SAFwB,aAExBA,SAFwB;AAAA,MAEbC,KAFa,aAEbA,KAFa;;AAIhCP,EAAAA,SAAS,CAAC,YAAM;AACZM,IAAAA,SAAS,CAACE,OAAV,CAAkB,UAACC,QAAD,EAAWC,CAAX,EAAiB;AAAA,UACvBC,MADuB,GACLF,QADK,CACvBE,MADuB;AAAA,UACfC,KADe,GACLH,QADK,CACfG,KADe;AAE/BL,MAAAA,KAAK,CAACM,QAAN,CAAeC,IAAf,CAAoBH,MAApB;AACAJ,MAAAA,KAAK,CAACK,KAAN,CAAYG,GAAZ,CAAgBH,KAAhB,EAAuBA,KAAvB,EAA8BA,KAA9B;AACAL,MAAAA,KAAK,CAACS,QAAN,CAAeD,GAAf,CAAmBE,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,MAAL,EAAT,IAA0BF,IAAI,CAACG,EAAlD,EAAsDH,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,MAAL,EAAT,IAA0BF,IAAI,CAACG,EAArF,EAAyFH,IAAI,CAACI,GAAL,CAASJ,IAAI,CAACE,MAAL,EAAT,IAA0BF,IAAI,CAACG,EAAxH;AACAb,MAAAA,KAAK,CAACe,YAAN;AACAnB,MAAAA,aAAa,CAACoB,OAAd,CAAsBC,WAAtB,CAAkCd,CAAlC,EAAqCH,KAAK,CAACkB,MAA3C;AACH,KAPD;AAQAtB,IAAAA,aAAa,CAACoB,OAAd,CAAsBG,cAAtB,CAAqCC,WAArC,GAAmD,IAAnD;AACH,GAVQ,EAUN,EAVM,CAAT;AAYA,sBACI;AAAe,IAAA,GAAG,EAAExB,aAApB;AAAmC,IAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAaG,SAAS,CAACsB,MAAvB,CAAzC;AAAyE,IAAA,aAAa,EAAE,KAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAoB,IAAA,MAAM,EAAC,UAA3B;AAAsC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAsB,IAAA,MAAM,EAAC,UAA7B;AAAwC,IAAA,KAAK,EAAC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport useStore from '../store'\n\nexport default function Particles() {\n    const instancedMesh = useRef()\n    const { particles, dummy } = useStore(state => state.mutation)\n\n    useEffect(() => {\n        particles.forEach((particle, i) => {\n            const { offset, scale } = particle\n            dummy.position.copy(offset)\n            dummy.scale.set(scale, scale, scale)\n            dummy.rotation.set(Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI)\n            dummy.updateMatrix()\n            instancedMesh.current.setMatrixAt(i, dummy.matrix)\n        })\n        instancedMesh.current.instanceMatrix.needsUpdate = true\n    }, [])\n\n    return (\n        <instancedMesh ref={instancedMesh} args={[null, null, particles.length]} frustumCulled={false}>\n            <coneBufferGeometry attach=\"geometry\" args={[2, 2, 3]} />\n            <meshStandardMaterial attach=\"material\" color=\"#606060\" />\n        </instancedMesh>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/gsg/Documents/3d/react-demo/demo/src/3d/Stars.js\";\nimport React, { useMemo } from 'react';\nexport default function Stars(_ref) {\n  var _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 2000 : _ref$count;\n  var positions = useMemo(function () {\n    var positions = [];\n\n    for (var i = 0; i < count; i++) {\n      var r = 4000;\n      var theta = 2 * Math.PI * Math.random();\n      var phi = Math.acos(2 * Math.random() - 1);\n      var x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000);\n      var y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000);\n      var z = r * Math.cos(phi) + (-1000 + Math.random() * 2000);\n      positions.push(x);\n      positions.push(y);\n      positions.push(z);\n    }\n\n    return new Float32Array(positions);\n  }, [count]);\n  return /*#__PURE__*/React.createElement(\"points\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    count: positions.length / 3,\n    array: positions,\n    itemSize: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"pointsMaterial\", {\n    attach: \"material\",\n    size: 15,\n    sizeAttenuation: true,\n    color: \"white\",\n    fog: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/gsg/Documents/3d/react-demo/demo/src/3d/Stars.js"],"names":["React","useMemo","Stars","count","positions","i","r","theta","Math","PI","random","phi","acos","x","cos","sin","y","z","push","Float32Array","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,eAAe,SAASC,KAAT,OAAiC;AAAA,wBAAhBC,KAAgB;AAAA,MAAhBA,KAAgB,2BAAR,IAAQ;AAC5C,MAAMC,SAAS,GAAGH,OAAO,CAAC,YAAM;AAC5B,QAAIG,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5B,UAAMC,CAAC,GAAG,IAAV;AACA,UAAMC,KAAK,GAAG,IAAIC,IAAI,CAACC,EAAT,GAAcD,IAAI,CAACE,MAAL,EAA5B;AACA,UAAMC,GAAG,GAAGH,IAAI,CAACI,IAAL,CAAU,IAAIJ,IAAI,CAACE,MAAL,EAAJ,GAAoB,CAA9B,CAAZ;AACA,UAAMG,CAAC,GAAGP,CAAC,GAAGE,IAAI,CAACM,GAAL,CAASP,KAAT,CAAJ,GAAsBC,IAAI,CAACO,GAAL,CAASJ,GAAT,CAAtB,IAAuC,CAAC,IAAD,GAAQH,IAAI,CAACE,MAAL,KAAgB,IAA/D,CAAV;AACA,UAAMM,CAAC,GAAGV,CAAC,GAAGE,IAAI,CAACO,GAAL,CAASR,KAAT,CAAJ,GAAsBC,IAAI,CAACO,GAAL,CAASJ,GAAT,CAAtB,IAAuC,CAAC,IAAD,GAAQH,IAAI,CAACE,MAAL,KAAgB,IAA/D,CAAV;AACA,UAAMO,CAAC,GAAGX,CAAC,GAAGE,IAAI,CAACM,GAAL,CAASH,GAAT,CAAJ,IAAqB,CAAC,IAAD,GAAQH,IAAI,CAACE,MAAL,KAAgB,IAA7C,CAAV;AACAN,MAAAA,SAAS,CAACc,IAAV,CAAeL,CAAf;AACAT,MAAAA,SAAS,CAACc,IAAV,CAAeF,CAAf;AACAZ,MAAAA,SAAS,CAACc,IAAV,CAAeD,CAAf;AACH;;AACD,WAAO,IAAIE,YAAJ,CAAiBf,SAAjB,CAAP;AACH,GAdwB,EActB,CAACD,KAAD,CAdsB,CAAzB;AAeA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAgB,IAAA,MAAM,EAAC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAiB,IAAA,YAAY,EAAE,CAAC,YAAD,EAAe,UAAf,CAA/B;AAA2D,IAAA,KAAK,EAAEC,SAAS,CAACgB,MAAV,GAAmB,CAArF;AAAwF,IAAA,KAAK,EAAEhB,SAA/F;AAA0G,IAAA,QAAQ,EAAE,CAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAII;AAAgB,IAAA,MAAM,EAAC,UAAvB;AAAkC,IAAA,IAAI,EAAE,EAAxC;AAA4C,IAAA,eAAe,MAA3D;AAA4D,IAAA,KAAK,EAAC,OAAlE;AAA0E,IAAA,GAAG,EAAE,KAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH","sourcesContent":["import React, { useMemo } from 'react'\n\nexport default function Stars({ count = 2000 }) {\n    const positions = useMemo(() => {\n        let positions = []\n        for (let i = 0; i < count; i++) {\n            const r = 4000\n            const theta = 2 * Math.PI * Math.random()\n            const phi = Math.acos(2 * Math.random() - 1)\n            const x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n            const y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n            const z = r * Math.cos(phi) + (-1000 + Math.random() * 2000)\n            positions.push(x)\n            positions.push(y)\n            positions.push(z)\n        }\n        return new Float32Array(positions)\n    }, [count])\n    return (\n        <points>\n            <bufferGeometry attach=\"geometry\">\n                <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n            </bufferGeometry>\n            <pointsMaterial attach=\"material\" size={15} sizeAttenuation color=\"white\" fog={false} />\n        </points>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/gsg/Documents/3d/react-demo/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gsg/Documents/3d/react-demo/demo/src/3d/Explosions.js\";\nimport * as THREE from 'three';\nimport React, { useRef, useMemo, useEffect } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport useStore, { audio, playAudio } from '../store';\n\nfunction make(color, speed) {\n  return {\n    ref: React.createRef(),\n    color,\n    data: new Array(20).fill().map(function () {\n      return [new THREE.Vector3(), new THREE.Vector3(-1 + Math.random() * 2, -1 + Math.random() * 2, -1 + Math.random() * 2).normalize().multiplyScalar(speed * 0.75)];\n    })\n  };\n}\n\nexport default function Explosions() {\n  var _this = this;\n\n  var explosions = useStore(function (state) {\n    return state.explosions;\n  });\n  return explosions.map(function (_ref) {\n    var guid = _ref.guid,\n        offset = _ref.offset,\n        scale = _ref.scale;\n    return /*#__PURE__*/React.createElement(Explosion, {\n      key: guid,\n      position: offset,\n      scale: scale * 0.75,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 56\n      }\n    });\n  });\n}\n\nfunction Explosion(_ref2) {\n  var _this2 = this;\n\n  var position = _ref2.position,\n      scale = _ref2.scale;\n  var group = useRef();\n\n  var _useStore = useStore(function (state) {\n    return state.mutation;\n  }),\n      dummy = _useStore.dummy;\n\n  var particles = useMemo(function () {\n    return [make('white', 0.8), make('orange', 0.6)];\n  }, []);\n  useEffect(function () {\n    return void playAudio(new Audio(audio.mp3.explosion), 0.5);\n  }, []);\n  useFrame(function () {\n    particles.forEach(function (_ref3, type) {\n      var data = _ref3.data;\n      var mesh = group.current.children[type];\n      data.forEach(function (_ref4, i) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            vec = _ref5[0],\n            normal = _ref5[1];\n\n        vec.add(normal);\n        dummy.position.copy(vec);\n        dummy.updateMatrix();\n        mesh.setMatrixAt(i, dummy.matrix);\n      });\n      mesh.material.opacity -= 0.025;\n      mesh.instanceMatrix.needsUpdate = true;\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: group,\n    position: position,\n    scale: [scale, scale, scale],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, particles.map(function (_ref6, index) {\n    var color = _ref6.color,\n        data = _ref6.data;\n    return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n      key: index,\n      args: [null, null, data.length],\n      frustumCulled: false,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"dodecahedronBufferGeometry\", {\n      attach: \"geometry\",\n      args: [10, 0],\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n      attach: \"material\",\n      color: color,\n      transparent: true,\n      opacity: 1,\n      fog: false,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }));\n  }));\n}","map":{"version":3,"sources":["/Users/gsg/Documents/3d/react-demo/demo/src/3d/Explosions.js"],"names":["THREE","React","useRef","useMemo","useEffect","useFrame","useStore","audio","playAudio","make","color","speed","ref","createRef","data","Array","fill","map","Vector3","Math","random","normalize","multiplyScalar","Explosions","explosions","state","guid","offset","scale","Explosion","position","group","mutation","dummy","particles","Audio","mp3","explosion","forEach","type","mesh","current","children","i","vec","normal","add","copy","updateMatrix","setMatrixAt","matrix","material","opacity","instanceMatrix","needsUpdate","index","length"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, { useRef, useMemo, useEffect } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport useStore, { audio, playAudio } from '../store'\n\nfunction make(color, speed) {\n    return {\n        ref: React.createRef(),\n        color,\n        data: new Array(20)\n            .fill()\n            .map(() => [\n                new THREE.Vector3(),\n                new THREE.Vector3(-1 + Math.random() * 2, -1 + Math.random() * 2, -1 + Math.random() * 2).normalize().multiplyScalar(speed * 0.75)\n            ])\n    }\n}\n\nexport default function Explosions() {\n    const explosions = useStore(state => state.explosions)\n    return explosions.map(({ guid, offset, scale }) => <Explosion key={guid} position={offset} scale={scale * 0.75} />)\n}\n\nfunction Explosion({ position, scale }) {\n    const group = useRef()\n    const { dummy } = useStore(state => state.mutation)\n    const particles = useMemo(() => [make('white', 0.8), make('orange', 0.6)], [])\n\n    useEffect(() => void playAudio(new Audio(audio.mp3.explosion), 0.5), [])\n\n    useFrame(() => {\n        particles.forEach(({ data }, type) => {\n            const mesh = group.current.children[type]\n            data.forEach(([vec, normal], i) => {\n                vec.add(normal)\n                dummy.position.copy(vec)\n                dummy.updateMatrix()\n                mesh.setMatrixAt(i, dummy.matrix)\n            })\n            mesh.material.opacity -= 0.025\n            mesh.instanceMatrix.needsUpdate = true\n        })\n    })\n\n    return (\n        <group ref={group} position={position} scale={[scale, scale, scale]}>\n            {particles.map(({ color, data }, index) => (\n                <instancedMesh key={index} args={[null, null, data.length]} frustumCulled={false}>\n                    <dodecahedronBufferGeometry attach=\"geometry\" args={[10, 0]} />\n                    <meshBasicMaterial attach=\"material\" color={color} transparent opacity={1} fog={false} />\n                </instancedMesh>\n            ))}\n        </group>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}